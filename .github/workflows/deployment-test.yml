name: Chain deployment test

on:
  # Use the following to explicitly start this workflow.
  # packages/deployment/scripts/start-deployment-test.sh <BRANCH-OR-TAG>
  workflow_dispatch:
  push:
    branches:
      - master
      - release-pismo
      - beta
    tags:
      - '@agoric/sdk@*'
  pull_request:
  merge_group:
  schedule:
    - cron: '17 6 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deployment-test:
    runs-on: ubuntu-22.04 # jammy (LTS)
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'
      - run: sudo packages/deployment/scripts/install-deps.sh
      - uses: ./.github/actions/restore-golang
        with:
          go-version: '1.20'
      - uses: ./.github/actions/restore-node
        with:
          node-version: 18.x
          # Forces xsnap to initialize all memory to random data, which increases
          # the chances the content of snapshots may deviate between validators
          xsnap-random-init: '1'

      # Select a branch on loadgen to test against by adding text to the body of the
      # pull request. For example: #loadgen-branch: user-123-update-foo
      # The default is 'main'
      - name: Get the appropriate loadgen branch
        id: get-loadgen-branch
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            let branch = 'main';
            if (context.payload.pull_request) {
              const { body } = context.payload.pull_request;
              const regex = /^\#loadgen-branch:\s+(\S+)/m;
              const result = regex.exec(body);
              if (result) {
                branch = result[1];
              }
            }
            console.log(branch);
            return branch;

      - name: Check out loadgen
        uses: actions/checkout@v3
        with:
          repository: Agoric/testnet-load-generator
          path: testnet-load-generator
          ref: ${{steps.get-loadgen-branch.outputs.result}}

      - name: Put repos under /usr/src where scripts expect them
        run: |
          set -e
          sudo mv "$GITHUB_WORKSPACE/testnet-load-generator" /usr/src/testnet-load-generator
          sudo cp -a "$GITHUB_WORKSPACE" /usr/src/agoric-sdk
          ln -s /usr/src/agoric-sdk/packages/deployment/bin/ag-setup-cosmos /usr/local/bin/ag-setup-cosmos
        working-directory: /

      - name: Build cosmic-swingset dependencies
        run: |
          set -e
          cd packages/cosmic-swingset
          make install
        working-directory: /usr/src/agoric-sdk
      - run: /usr/src/agoric-sdk/packages/deployment/scripts/integration-test.sh
        timeout-minutes: 90
        working-directory: /usr/src/agoric-sdk
        env:
          NETWORK_NAME: chaintest
      - name: capture results
        if: always()
        run: |
          NOW=$(date -u +%Y%m%dT%H%M%S)
          echo "NOW=$NOW" >> "$GITHUB_ENV"

          # Stop the chain from running.
          packages/deployment/scripts/setup.sh play stop || true

          # Get the results.
          packages/deployment/scripts/capture-integration-results.sh "${{ job.status == 'failure' }}"

          # Tear down the nodes.
          echo yes | packages/deployment/scripts/setup.sh destroy || true
        working-directory: /usr/src/agoric-sdk
        env:
          NETWORK_NAME: chaintest
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: deployment-test-results-${{ env.NOW }}
          path: /usr/src/agoric-sdk/chaintest/results

      - name: notify on failure
        if: failure() && github.event_name != 'pull_request'
        uses: ./.github/actions/notify-status
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          from: ${{ secrets.NOTIFY_EMAIL_FROM }}
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          password: ${{ secrets.NOTIFY_EMAIL_PASSWORD }}
